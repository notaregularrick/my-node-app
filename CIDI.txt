Ejecutar Jenkins en un docker

docker run \
  --name jenkins \
  --rm \
  -p 8080:8080 \
  -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  jenkins/jenkins:lts


Acceder al Jenkins

localhost:8080

para obtener la clave 

docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword


Ejecuta para crear el entorno de la aplicacion

mkdir my-node-app
cd my-node-app

Inicializa el proyecto node
npm init -y

Instala express
npm install express

Crea un archivo app.js

const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, World from Docker and Jenkins!');
});

app.listen(port, () => {
  console.log(`App running on http://localhost:${port}`);
});

Editar el archivo package.json

{
  "name": "my-node-app",
  "version": "1.0.0",
  "description": "A simple Node.js app to demonstrate CI/CD with Docker and Jenkins",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}


Crea un Dockerfile

# Usar una imagen base de Node.js
FROM node:14

# Establecer el directorio de trabajo en el contenedor
WORKDIR /usr/src/app

# Copiar package.json y package-lock.json
COPY package*.json ./

# Instalar las dependencias de Node.js
RUN npm install

# Copiar todo el contenido del proyecto
COPY . .

# Exponer el puerto en el que la app escuchar√°
EXPOSE 3000

# Comando para ejecutar la app
CMD ["npm", "start"]


Construye la imagen

docker build -t my-node-app .


Corre el contenedor

docker run -p 3000:3000 my-node-app


Analisis de problema

Configurar Pipeline

Subir el codigo a un repositorio publico de github

Entrar al jenkins y configurar un pipeline con el siguiente script de ejecuccion


pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'my-node-app'
    }

    stages {
        stage('Checkout') {
            steps {
                
                git url: 'https://github.com/jhoberth13/laboratorio.git', branch: 'main' //colocar la url del repositorio
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    sh 'docker run -d -p 3000:3000 $DOCKER_IMAGE'
                }
            }
        }
    }

    post {
        always {
            sh 'docker ps -a -q | xargs docker rm -f'
            sh 'docker rmi $DOCKER_IMAGE'
        }
    }
}


Este no va funcionar de forma inmediata tomar los correctivo necesarios para que se ejecute ese pipeline que lo que hace es clonar el codigo fuente, construye la imagen y ejecuta la imagen y al finalizar limpia todos los recursos

